@model SBMS.Models.SalesViewModel
@{
    ViewBag.Title = "Entry";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
    <div id="salesSetup" class="container text-center">
        <h3>Sales Entry From</h3>
        @using (Html.BeginForm("Entry", "Sales"))
        {

    <div class="row">
        <br />
        <div class="col-md-12" style="background: black"></div>
        <div class="col-md-12" style="background: aquamarine"></div>

        <div class="form-horizontal">
            <h4 class="h-position">Entry Sales</h4>
            <hr class="hr-design">

            @Html.ValidationSummary(true, "", new { @class = "text-danger" })

            <div class="row">
                <div class="col-md-6">
                    <div class="panel panel-default">
                        <div class="panel-heading">Customer</div>
                        <div class="panel-body">
                            <div class="row">
                                <div class="col-md-12">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.CustomerId, new { @class = "control-label col-md-4" })
                                        <div class="col-md-8">
                                            @Html.DropDownListFor(model => model.CustomerId, Model.CustomerSelectListItems, "---Select---", new { @id = "customer", @class = "form-control" })
                                            @Html.ValidationMessageFor(model => model.CustomerId, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        @Html.LabelFor(model => model.Date, new { @class = "control-label col-md-4" })
                                        <div class="col-md-8">
                                            @Html.EditorFor(model => model.Date, new { htmlAttributes = new { @id = "date", @class = "form-control" }, @value = DateTime.Now })
                                            @Html.ValidationMessageFor(model => model.Date, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        @Html.LabelFor(model => model.LoyaltyPoint, new { @class = "control-label col-md-4" })
                                        <div class="col-md-8">
                                            @Html.EditorFor(model => model.LoyaltyPoint, new { htmlAttributes = new { @id = "loyaltyPoint", @class = "form-control", @placeholder = "<View>", @readonly = "readonly" } })
                                            @Html.ValidationMessageFor(model => model.LoyaltyPoint, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="form-group">

                                        <div class="col-md-9">

                                        </div>
                                    </div>
                                </div>


                            </div>
                        </div>
                        <div class="panel-heading">Product</div>
                        <div class="panel-body">
                            <div class="row">
                                <div class="col-md-12">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.ProductId, new { @class = "control-label col-md-4" })
                                        <div class="col-md-8">
                                            @Html.DropDownListFor(model => model.ProductId, Model.ProductSelectListItems, "---Select---", new { @id = "product", @class = "form-control" })
                                            @Html.ValidationMessageFor(model => model.ProductId, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        @Html.LabelFor(model => model.AvailableQuantity, new { @class = "control-label col-md-4" })
                                        <div class="col-md-8">
                                            @Html.EditorFor(model => model.AvailableQuantity, new { htmlAttributes = new { @id = "availableQuantity", @class = "form-control", @placeholder = "<View>", @readonly = "readonly" } })
                                            @Html.ValidationMessageFor(model => model.AvailableQuantity, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        @Html.LabelFor(model => model.Quantity, new { @class = "control-label col-md-4" })
                                        <div class="col-md-8">
                                            @Html.EditorFor(model => model.Quantity, new { htmlAttributes = new { @id = "quantity", @class = "form-control", @placeholder = "Enter Quantity" } })
                                            @Html.ValidationMessageFor(model => model.Quantity, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        @Html.LabelFor(model => model.UnitPrice, new { @class = "control-label col-md-4" })
                                        <div class="col-md-8">
                                            @Html.EditorFor(model => model.UnitPrice, new { htmlAttributes = new { @id = "unitPrice", @class = "form-control", @placeholder = "Enter Unit Price" } })
                                            @Html.ValidationMessageFor(model => model.UnitPrice, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        <div class="col-md-offset-8 col-md-4">
                                            <input type="button" id="addButton" value="Add" class="btn btn-success" />
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                </div>
                <div class="col-md-6">
                    <div class="row">
                        <div>
                            <table class="table table-bordered table-striped table-hover table-responsive">
                                <thead>
                                    <tr>
                                        <th>SL</th>
                                        <th>
                                            @Html.DisplayNameFor(model => model.ProductId)
                                        </th>
                                        <th>
                                            @Html.DisplayNameFor(model => model.Quantity)
                                        </th>
                                        <th>
                                            @Html.DisplayNameFor(model => model.UnitPrice)
                                        </th>
                                        <th>
                                            @Html.DisplayNameFor(model => model.TotalPrice)
                                        </th>

                                        <th>Action</th>
                                    </tr>

                                </thead>
                                <tbody id="productTableBody"></tbody>
                            </table>
                        </div>
                    </div>

                    <div class="border border-primary">
                        <div class="col-md-2"></div>
                        <div class="col-md-10">
                            <div class="form-group">
                                @Html.LabelFor(model => model.GrandTotal, new { @class = "control-label col-md-6" })
                                <div class="col-md-6">
                                    @Html.EditorFor(model => model.GrandTotal, new { htmlAttributes = new { @id = "grandTotal", @class = "form-control", @placeholder = "<View>", @readonly = "readonly" } })
                                    @Html.ValidationMessageFor(model => model.GrandTotal, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.DiscountAmounth, new { @class = "control-label col-md-6" })
                                <div class="col-md-6">
                                    @Html.EditorFor(model => model.DiscountAmounth, new { htmlAttributes = new { @id = "discountAmounth", @class = "form-control", @placeholder = "<View>", @readonly = "readonly" } })
                                    @Html.ValidationMessageFor(model => model.DiscountAmounth, "", new { @class = "text-danger" })
                                </div>
                            </div>



                            <div class="form-group">
                                @Html.LabelFor(model => model.Discount, new { @class = "control-label col-md-6" })
                                <div class="col-md-6">
                                    @Html.EditorFor(model => model.Discount, new { htmlAttributes = new { @id = "discount", @class = "form-control", @placeholder = "<View>", @readonly = "readonly" } })
                                    @Html.ValidationMessageFor(model => model.Discount, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.PayableAmounth, new { @class = "control-label col-md-6" })
                                <div class="col-md-6">
                                    @Html.EditorFor(model => model.PayableAmounth, new { htmlAttributes = new { @id = "payableAmounth", @class = "form-control", @placeholder = "<View>", @readonly = "readonly" } })
                                    @Html.ValidationMessageFor(model => model.PayableAmounth, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>

                    </div>
                    <div class="row">
                        <div class="col-md-9"></div>
                        <div class="col-md-3">
                            <input type="submit" id="salesSubmitButton" value="Submit" class="btn btn-primary" />
                        </div>



                    </div>

                </div>
            </div>







        </div>
        <div class="col-md-12" style="background: black"></div>
        <div class="col-md-12" style="background: aquamarine"></div>

    </div>

           
        }
    </div>


    @section Scripts{
        <script src="~/Scripts/jquery.validate.min.js"></script>
        <script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
        <center>
            @if (ViewBag.Message != null)
            {
                <script type="text/javascript">
            window.onload = function () {
                alert("@ViewBag.Message");
            };
                </script>
            }
        </center>
        <script>
            // Show LoyaltyPoint Scripts
            $("#customer").change(function () {
                debugger
                var customerId = $("#customer").val();

                $.ajax({
                    url: "/sales/getloyaltypoint",
                    type: "POST",
                    data: { customerId: customerId },
                    success: function (customer) {
                        $("#loyaltyPoint").val(customer.LoyaltyPoint);
                    }
                })
            })

            // Show AvailableQuantity Scripts
            $("#product").change(function () {
                debugger
                var productId = $("#product").val();

                $.ajax({
                    url: "/sales/getavailablequantity",
                    type: "POST",
                    data: { productId: productId },
                    success: function (salesModel) {
                        $("#availableQuantity").val(salesModel.AvailableQuantity);
                    }
                })
            })

            // Show UnitPrice Scripts
            $("#product").change(function () {
                debugger
                var productId = $("#product").val();

                $.ajax({
                    url: "/sales/getmrp",
                    type: "POST",
                    data: { productId: productId },
                    success: function (mrp) {
                        $("#unitPrice").val(mrp);
                    }
                })
            })

            // Table Scripts
            $("#addButton").click(function () {
                addProductsInList();
                calculateGrandTotal();
                discountCalculation();
            });

            function addProductsInList() {

                var getProducts = getProductsFromTextBox();

                var index = $("#productTableBody").children("tr").length;

                var sl = index;
                var indexCell = "<td style='display:none'><input type='hidden' id='index" + index + "' name='SalesDetails.index' value='" + index + "' /></td>";
                var slCell = "<td>" + (++sl) + "</td>";
                var productCell = "<td><input type='hidden' id='product" + index + "' name='SalesDetails[" + index + "].ProductId' value='" + getProducts.ProductId + "'/>" + getProducts.Product + "</td>";
                var quantityCell = "<td><input type='hidden' id='quantity" + index + "' name='SalesDetails[" + index + "].Quantity' value='" + getProducts.Quantity + "' />" + getProducts.Quantity + "</td>";
                var unitPriceCell = "<td><input type='hidden' id='unitPrice" + index + "' name='SalesDetails[" + index + "].UnitPrice' value='" + getProducts.UnitPrice + "' />" + getProducts.UnitPrice + "</td>";
                var totalPriceCell = "<td id='totalPrice'><input type='hidden' id='totalPrice" + index + "' name='SalesDetails[" + index + "].TotalPrice' value='" + getProducts.TotalPrice + "' />" + getProducts.TotalPrice + "</td>";

                var deleteCell = "<td><a id='deleteCell' class='btn btn-danger'><i class='glyphicon glyphicon-trash'></i></a></td>";

                var createRow = "<tr>" + indexCell + slCell + productCell + quantityCell + unitPriceCell + totalPriceCell + deleteCell + "</tr>";
                $("#productTableBody").append(createRow);
                $("#purchaseSubmitButton").prop('disabled', false);
            }

            function getProductsFromTextBox() {

                var product = $("#product option:selected").text();
                var productId = $("#product").val();
                var quantity = $("#quantity").val();
                var unitPrice = $("#unitPrice").val();
                var totalPrice = quantity * unitPrice;

                if (productId === undefined || productId.length == 0) {
                    alert('Please select your product!');
                    return;
                }

                if (quantity === undefined || quantity.length == 0) {
                    alert('Please enter product quantity!');
                    return;
                }
                if (unitPrice === undefined || unitPrice.length == 0) {
                    alert('Please enter product unit price!');
                    return;
                }


                var product = {

                    "Product": product,
                    "ProductId": productId,
                    "Quantity": quantity,
                    "UnitPrice": unitPrice,
                    "TotalPrice": totalPrice,
                }
                return product;
            }

            // Table Action Scripts
            $(".table tbody").on('click', '#deleteCell', function () {
                $(this).closest('tr').remove();
                // Check Exist Table Row
                var row = $("#productTableBody").children('tr').length;
                if (row > 0) {
                    $("#salesSubmitButton").prop('disabled', false);
                }
                else {
                    $("#salesSubmitButton").prop('disabled', true);
                }
            })

            function calculateGrandTotal() {
                var grandTotal = 0;
                debugger
                $(".table tbody tr").each(function () {
                    debugger
                    var val = $(this).find("#totalPrice").text();
                    debugger
                    val = parseFloat(val);
                    grandTotal += val;
                })
                $("#grandTotal").val(grandTotal);
            }

            function discountCalculation() {
                var loyaltyPoint = $("#loyaltyPoint").val();
                var grandTotal = $("#grandTotal").val();

                var point = grandTotal / 1000;

                loyaltyPoint = parseInt(loyaltyPoint) + parseFloat(point);
                $("#loyaltyPoint").val(loyaltyPoint);

                var discount = loyaltyPoint / 10;
                $("#discount").val(discount);

                var discountAmounth = (grandTotal * discount) / 100;
                $("#discountAmounth").val(discountAmounth);

                var payableAmounth = grandTotal - discountAmounth;
                $("#payableAmounth").val(payableAmounth);
            }

        </script>
    }
